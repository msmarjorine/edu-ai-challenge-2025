function cov_2i5inhzmju(){var path="/Users/anastasiyagolubeva/Desktop/Nasta/AI Challenge/2/edu-ai-challenge-2025/8/schema.js";var hash="0f80243160137f5d4e7a3ea0f6e6166f57fd09fc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/anastasiyagolubeva/Desktop/Nasta/AI Challenge/2/edu-ai-challenge-2025/8/schema.js",statementMap:{"0":{start:{line:17,column:4},end:{line:17,column:28}},"1":{start:{line:18,column:4},end:{line:18,column:30}},"2":{start:{line:19,column:4},end:{line:19,column:28}},"3":{start:{line:27,column:4},end:{line:27,column:27}},"4":{start:{line:28,column:4},end:{line:28,column:16}},"5":{start:{line:37,column:4},end:{line:37,column:33}},"6":{start:{line:38,column:4},end:{line:38,column:16}},"7":{start:{line:47,column:4},end:{line:47,column:26}},"8":{start:{line:48,column:4},end:{line:48,column:16}},"9":{start:{line:59,column:4},end:{line:64,column:6}},"10":{start:{line:75,column:4},end:{line:77,column:5}},"11":{start:{line:76,column:6},end:{line:76,column:57}},"12":{start:{line:80,column:4},end:{line:89,column:5}},"13":{start:{line:81,column:6},end:{line:88,column:7}},"14":{start:{line:82,column:8},end:{line:82,column:40}},"15":{start:{line:84,column:8},end:{line:87,column:10}},"16":{start:{line:91,column:4},end:{line:91,column:39}},"17":{start:{line:101,column:4},end:{line:101,column:74}},"18":{start:{line:110,column:4},end:{line:110,column:12}},"19":{start:{line:111,column:4},end:{line:111,column:31}},"20":{start:{line:112,column:4},end:{line:112,column:31}},"21":{start:{line:113,column:4},end:{line:113,column:29}},"22":{start:{line:114,column:4},end:{line:114,column:27}},"23":{start:{line:123,column:4},end:{line:123,column:33}},"24":{start:{line:124,column:4},end:{line:124,column:16}},"25":{start:{line:133,column:4},end:{line:133,column:33}},"26":{start:{line:134,column:4},end:{line:134,column:16}},"27":{start:{line:143,column:4},end:{line:143,column:32}},"28":{start:{line:144,column:4},end:{line:144,column:16}},"29":{start:{line:153,column:4},end:{line:153,column:29}},"30":{start:{line:154,column:4},end:{line:154,column:16}},"31":{start:{line:162,column:4},end:{line:162,column:54}},"32":{start:{line:170,column:4},end:{line:170,column:59}},"33":{start:{line:180,column:19},end:{line:180,column:21}},"34":{start:{line:183,column:4},end:{line:188,column:5}},"35":{start:{line:184,column:6},end:{line:187,column:8}},"36":{start:{line:191,column:4},end:{line:197,column:5}},"37":{start:{line:192,column:6},end:{line:196,column:9}},"38":{start:{line:200,column:4},end:{line:206,column:5}},"39":{start:{line:201,column:6},end:{line:205,column:9}},"40":{start:{line:209,column:4},end:{line:215,column:5}},"41":{start:{line:210,column:6},end:{line:214,column:9}},"42":{start:{line:218,column:4},end:{line:224,column:5}},"43":{start:{line:219,column:6},end:{line:223,column:9}},"44":{start:{line:226,column:4},end:{line:230,column:6}},"45":{start:{line:239,column:4},end:{line:239,column:12}},"46":{start:{line:240,column:4},end:{line:240,column:25}},"47":{start:{line:241,column:4},end:{line:241,column:25}},"48":{start:{line:242,column:4},end:{line:242,column:29}},"49":{start:{line:243,column:4},end:{line:243,column:30}},"50":{start:{line:252,column:4},end:{line:252,column:26}},"51":{start:{line:253,column:4},end:{line:253,column:16}},"52":{start:{line:262,column:4},end:{line:262,column:26}},"53":{start:{line:263,column:4},end:{line:263,column:16}},"54":{start:{line:271,column:4},end:{line:271,column:28}},"55":{start:{line:272,column:4},end:{line:272,column:16}},"56":{start:{line:280,column:4},end:{line:280,column:29}},"57":{start:{line:281,column:4},end:{line:281,column:16}},"58":{start:{line:291,column:19},end:{line:291,column:21}},"59":{start:{line:294,column:4},end:{line:299,column:5}},"60":{start:{line:295,column:6},end:{line:298,column:8}},"61":{start:{line:302,column:4},end:{line:304,column:5}},"62":{start:{line:303,column:6},end:{line:303,column:83}},"63":{start:{line:307,column:4},end:{line:309,column:5}},"64":{start:{line:308,column:6},end:{line:308,column:91}},"65":{start:{line:312,column:4},end:{line:314,column:5}},"66":{start:{line:313,column:6},end:{line:313,column:92}},"67":{start:{line:317,column:4},end:{line:319,column:5}},"68":{start:{line:318,column:6},end:{line:318,column:91}},"69":{start:{line:321,column:4},end:{line:325,column:6}},"70":{start:{line:340,column:4},end:{line:345,column:5}},"71":{start:{line:341,column:6},end:{line:344,column:8}},"72":{start:{line:347,column:4},end:{line:351,column:6}},"73":{start:{line:360,column:4},end:{line:360,column:12}},"74":{start:{line:361,column:4},end:{line:361,column:24}},"75":{start:{line:362,column:4},end:{line:362,column:24}},"76":{start:{line:371,column:4},end:{line:371,column:24}},"77":{start:{line:372,column:4},end:{line:372,column:16}},"78":{start:{line:381,column:4},end:{line:381,column:24}},"79":{start:{line:382,column:4},end:{line:382,column:16}},"80":{start:{line:392,column:19},end:{line:392,column:21}},"81":{start:{line:393,column:20},end:{line:393,column:25}},"82":{start:{line:396,column:4},end:{line:398,column:5}},"83":{start:{line:397,column:6},end:{line:397,column:34}},"84":{start:{line:401,column:4},end:{line:406,column:5}},"85":{start:{line:402,column:6},end:{line:405,column:8}},"86":{start:{line:409,column:4},end:{line:415,column:5}},"87":{start:{line:410,column:6},end:{line:414,column:9}},"88":{start:{line:418,column:4},end:{line:424,column:5}},"89":{start:{line:419,column:6},end:{line:423,column:9}},"90":{start:{line:426,column:4},end:{line:430,column:6}},"91":{start:{line:439,column:4},end:{line:439,column:12}},"92":{start:{line:440,column:4},end:{line:440,column:39}},"93":{start:{line:441,column:4},end:{line:441,column:31}},"94":{start:{line:442,column:4},end:{line:442,column:31}},"95":{start:{line:451,column:4},end:{line:451,column:33}},"96":{start:{line:452,column:4},end:{line:452,column:16}},"97":{start:{line:461,column:4},end:{line:461,column:33}},"98":{start:{line:462,column:4},end:{line:462,column:16}},"99":{start:{line:472,column:19},end:{line:472,column:21}},"100":{start:{line:475,column:4},end:{line:480,column:5}},"101":{start:{line:476,column:6},end:{line:479,column:8}},"102":{start:{line:483,column:4},end:{line:489,column:5}},"103":{start:{line:484,column:6},end:{line:488,column:9}},"104":{start:{line:492,column:4},end:{line:498,column:5}},"105":{start:{line:493,column:6},end:{line:497,column:9}},"106":{start:{line:501,column:27},end:{line:501,column:29}},"107":{start:{line:502,column:4},end:{line:511,column:5}},"108":{start:{line:502,column:17},end:{line:502,column:18}},"109":{start:{line:503,column:23},end:{line:503,column:56}},"110":{start:{line:504,column:25},end:{line:504,column:72}},"111":{start:{line:506,column:6},end:{line:510,column:7}},"112":{start:{line:507,column:8},end:{line:507,column:42}},"113":{start:{line:509,column:8},end:{line:509,column:46}},"114":{start:{line:513,column:4},end:{line:517,column:6}},"115":{start:{line:526,column:4},end:{line:526,column:12}},"116":{start:{line:527,column:4},end:{line:527,column:25}},"117":{start:{line:528,column:4},end:{line:528,column:28}},"118":{start:{line:536,column:4},end:{line:536,column:27}},"119":{start:{line:537,column:4},end:{line:537,column:16}},"120":{start:{line:547,column:19},end:{line:547,column:21}},"121":{start:{line:550,column:4},end:{line:555,column:5}},"122":{start:{line:551,column:6},end:{line:554,column:8}},"123":{start:{line:557,column:28},end:{line:557,column:30}},"124":{start:{line:560,column:4},end:{line:571,column:5}},"125":{start:{line:561,column:27},end:{line:561,column:56}},"126":{start:{line:562,column:28},end:{line:562,column:38}},"127":{start:{line:564,column:21},end:{line:564,column:68}},"128":{start:{line:566,column:6},end:{line:570,column:7}},"129":{start:{line:567,column:8},end:{line:567,column:38}},"130":{start:{line:569,column:8},end:{line:569,column:44}},"131":{start:{line:574,column:4},end:{line:593,column:5}},"132":{start:{line:575,column:25},end:{line:575,column:49}},"133":{start:{line:576,column:24},end:{line:576,column:42}},"134":{start:{line:577,column:24},end:{line:577,column:74}},"135":{start:{line:577,column:48},end:{line:577,column:73}},"136":{start:{line:579,column:6},end:{line:585,column:7}},"137":{start:{line:580,column:8},end:{line:584,column:11}},"138":{start:{line:588,column:6},end:{line:592,column:7}},"139":{start:{line:589,column:8},end:{line:591,column:9}},"140":{start:{line:590,column:10},end:{line:590,column:37}},"141":{start:{line:595,column:4},end:{line:599,column:6}},"142":{start:{line:613,column:4},end:{line:613,column:33}},"143":{start:{line:621,column:4},end:{line:621,column:33}},"144":{start:{line:629,column:4},end:{line:629,column:34}},"145":{start:{line:637,column:4},end:{line:637,column:31}},"146":{start:{line:646,column:4},end:{line:646,column:39}},"147":{start:{line:655,column:4},end:{line:655,column:45}},"148":{start:{line:660,column:0},end:{line:671,column:1}},"149":{start:{line:661,column:2},end:{line:670,column:4}},"150":{start:{line:674,column:0},end:{line:748,column:1}},"151":{start:{line:675,column:2},end:{line:675,column:56}},"152":{start:{line:678,column:24},end:{line:683,column:4}},"153":{start:{line:685,column:21},end:{line:695,column:4}},"154":{start:{line:698,column:2},end:{line:698,column:42}},"155":{start:{line:699,column:24},end:{line:713,column:3}},"156":{start:{line:715,column:22},end:{line:715,column:56}},"157":{start:{line:716,column:2},end:{line:719,column:5}},"158":{start:{line:722,column:2},end:{line:722,column:46}},"159":{start:{line:723,column:26},end:{line:736,column:3}},"160":{start:{line:738,column:24},end:{line:738,column:60}},"161":{start:{line:739,column:2},end:{line:742,column:5}},"162":{start:{line:744,column:2},end:{line:744,column:38}},"163":{start:{line:745,column:2},end:{line:747,column:5}},"164":{start:{line:746,column:4},end:{line:746,column:66}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:2},end:{line:16,column:3}},loc:{start:{line:16,column:16},end:{line:20,column:3}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:13},end:{line:29,column:3}},line:26},"2":{name:"(anonymous_2)",decl:{start:{line:36,column:2},end:{line:36,column:3}},loc:{start:{line:36,column:23},end:{line:39,column:3}},line:36},"3":{name:"(anonymous_3)",decl:{start:{line:46,column:2},end:{line:46,column:3}},loc:{start:{line:46,column:16},end:{line:49,column:3}},line:46},"4":{name:"(anonymous_4)",decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:41},end:{line:65,column:3}},line:58},"5":{name:"(anonymous_5)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:29},end:{line:92,column:3}},line:73},"6":{name:"(anonymous_6)",decl:{start:{line:100,column:2},end:{line:100,column:3}},loc:{start:{line:100,column:25},end:{line:102,column:3}},line:100},"7":{name:"(anonymous_7)",decl:{start:{line:109,column:2},end:{line:109,column:3}},loc:{start:{line:109,column:16},end:{line:115,column:3}},line:109},"8":{name:"(anonymous_8)",decl:{start:{line:122,column:2},end:{line:122,column:3}},loc:{start:{line:122,column:20},end:{line:125,column:3}},line:122},"9":{name:"(anonymous_9)",decl:{start:{line:132,column:2},end:{line:132,column:3}},loc:{start:{line:132,column:20},end:{line:135,column:3}},line:132},"10":{name:"(anonymous_10)",decl:{start:{line:142,column:2},end:{line:142,column:3}},loc:{start:{line:142,column:19},end:{line:145,column:3}},line:142},"11":{name:"(anonymous_11)",decl:{start:{line:152,column:2},end:{line:152,column:3}},loc:{start:{line:152,column:15},end:{line:155,column:3}},line:152},"12":{name:"(anonymous_12)",decl:{start:{line:161,column:2},end:{line:161,column:3}},loc:{start:{line:161,column:10},end:{line:163,column:3}},line:161},"13":{name:"(anonymous_13)",decl:{start:{line:169,column:2},end:{line:169,column:3}},loc:{start:{line:169,column:8},end:{line:171,column:3}},line:169},"14":{name:"(anonymous_14)",decl:{start:{line:179,column:2},end:{line:179,column:3}},loc:{start:{line:179,column:25},end:{line:231,column:3}},line:179},"15":{name:"(anonymous_15)",decl:{start:{line:238,column:2},end:{line:238,column:3}},loc:{start:{line:238,column:16},end:{line:244,column:3}},line:238},"16":{name:"(anonymous_16)",decl:{start:{line:251,column:2},end:{line:251,column:3}},loc:{start:{line:251,column:13},end:{line:254,column:3}},line:251},"17":{name:"(anonymous_17)",decl:{start:{line:261,column:2},end:{line:261,column:3}},loc:{start:{line:261,column:13},end:{line:264,column:3}},line:261},"18":{name:"(anonymous_18)",decl:{start:{line:270,column:2},end:{line:270,column:3}},loc:{start:{line:270,column:12},end:{line:273,column:3}},line:270},"19":{name:"(anonymous_19)",decl:{start:{line:279,column:2},end:{line:279,column:3}},loc:{start:{line:279,column:13},end:{line:282,column:3}},line:279},"20":{name:"(anonymous_20)",decl:{start:{line:290,column:2},end:{line:290,column:3}},loc:{start:{line:290,column:25},end:{line:326,column:3}},line:290},"21":{name:"(anonymous_21)",decl:{start:{line:339,column:2},end:{line:339,column:3}},loc:{start:{line:339,column:25},end:{line:352,column:3}},line:339},"22":{name:"(anonymous_22)",decl:{start:{line:359,column:2},end:{line:359,column:3}},loc:{start:{line:359,column:16},end:{line:363,column:3}},line:359},"23":{name:"(anonymous_23)",decl:{start:{line:370,column:2},end:{line:370,column:3}},loc:{start:{line:370,column:12},end:{line:373,column:3}},line:370},"24":{name:"(anonymous_24)",decl:{start:{line:380,column:2},end:{line:380,column:3}},loc:{start:{line:380,column:12},end:{line:383,column:3}},line:380},"25":{name:"(anonymous_25)",decl:{start:{line:391,column:2},end:{line:391,column:3}},loc:{start:{line:391,column:25},end:{line:431,column:3}},line:391},"26":{name:"(anonymous_26)",decl:{start:{line:438,column:2},end:{line:438,column:3}},loc:{start:{line:438,column:29},end:{line:443,column:3}},line:438},"27":{name:"(anonymous_27)",decl:{start:{line:450,column:2},end:{line:450,column:3}},loc:{start:{line:450,column:20},end:{line:453,column:3}},line:450},"28":{name:"(anonymous_28)",decl:{start:{line:460,column:2},end:{line:460,column:3}},loc:{start:{line:460,column:20},end:{line:463,column:3}},line:460},"29":{name:"(anonymous_29)",decl:{start:{line:471,column:2},end:{line:471,column:3}},loc:{start:{line:471,column:25},end:{line:518,column:3}},line:471},"30":{name:"(anonymous_30)",decl:{start:{line:525,column:2},end:{line:525,column:3}},loc:{start:{line:525,column:22},end:{line:529,column:3}},line:525},"31":{name:"(anonymous_31)",decl:{start:{line:535,column:2},end:{line:535,column:3}},loc:{start:{line:535,column:11},end:{line:538,column:3}},line:535},"32":{name:"(anonymous_32)",decl:{start:{line:546,column:2},end:{line:546,column:3}},loc:{start:{line:546,column:25},end:{line:600,column:3}},line:546},"33":{name:"(anonymous_33)",decl:{start:{line:577,column:41},end:{line:577,column:42}},loc:{start:{line:577,column:48},end:{line:577,column:73}},line:577},"34":{name:"(anonymous_34)",decl:{start:{line:612,column:2},end:{line:612,column:3}},loc:{start:{line:612,column:18},end:{line:614,column:3}},line:612},"35":{name:"(anonymous_35)",decl:{start:{line:620,column:2},end:{line:620,column:3}},loc:{start:{line:620,column:18},end:{line:622,column:3}},line:620},"36":{name:"(anonymous_36)",decl:{start:{line:628,column:2},end:{line:628,column:3}},loc:{start:{line:628,column:19},end:{line:630,column:3}},line:628},"37":{name:"(anonymous_37)",decl:{start:{line:636,column:2},end:{line:636,column:3}},loc:{start:{line:636,column:16},end:{line:638,column:3}},line:636},"38":{name:"(anonymous_38)",decl:{start:{line:645,column:2},end:{line:645,column:3}},loc:{start:{line:645,column:24},end:{line:647,column:3}},line:645},"39":{name:"(anonymous_39)",decl:{start:{line:654,column:2},end:{line:654,column:3}},loc:{start:{line:654,column:30},end:{line:656,column:3}},line:654},"40":{name:"(anonymous_40)",decl:{start:{line:745,column:31},end:{line:745,column:32}},loc:{start:{line:745,column:49},end:{line:747,column:3}},line:745}},branchMap:{"0":{loc:{start:{line:58,column:30},end:{line:58,column:39}},type:"default-arg",locations:[{start:{line:58,column:37},end:{line:58,column:39}}],line:58},"1":{loc:{start:{line:60,column:15},end:{line:60,column:44}},type:"binary-expr",locations:[{start:{line:60,column:15},end:{line:60,column:33}},{start:{line:60,column:37},end:{line:60,column:44}}],line:60},"2":{loc:{start:{line:73,column:18},end:{line:73,column:27}},type:"default-arg",locations:[{start:{line:73,column:25},end:{line:73,column:27}}],line:73},"3":{loc:{start:{line:75,column:4},end:{line:77,column:5}},type:"if",locations:[{start:{line:75,column:4},end:{line:77,column:5}},{start:{line:75,column:4},end:{line:77,column:5}}],line:75},"4":{loc:{start:{line:75,column:8},end:{line:75,column:66}},type:"binary-expr",locations:[{start:{line:75,column:8},end:{line:75,column:23}},{start:{line:75,column:28},end:{line:75,column:42}},{start:{line:75,column:46},end:{line:75,column:65}}],line:75},"5":{loc:{start:{line:80,column:4},end:{line:89,column:5}},type:"if",locations:[{start:{line:80,column:4},end:{line:89,column:5}},{start:{line:80,column:4},end:{line:89,column:5}}],line:80},"6":{loc:{start:{line:183,column:4},end:{line:188,column:5}},type:"if",locations:[{start:{line:183,column:4},end:{line:188,column:5}},{start:{line:183,column:4},end:{line:188,column:5}}],line:183},"7":{loc:{start:{line:191,column:4},end:{line:197,column:5}},type:"if",locations:[{start:{line:191,column:4},end:{line:197,column:5}},{start:{line:191,column:4},end:{line:197,column:5}}],line:191},"8":{loc:{start:{line:191,column:8},end:{line:191,column:74}},type:"binary-expr",locations:[{start:{line:191,column:8},end:{line:191,column:36}},{start:{line:191,column:40},end:{line:191,column:74}}],line:191},"9":{loc:{start:{line:200,column:4},end:{line:206,column:5}},type:"if",locations:[{start:{line:200,column:4},end:{line:206,column:5}},{start:{line:200,column:4},end:{line:206,column:5}}],line:200},"10":{loc:{start:{line:200,column:8},end:{line:200,column:74}},type:"binary-expr",locations:[{start:{line:200,column:8},end:{line:200,column:36}},{start:{line:200,column:40},end:{line:200,column:74}}],line:200},"11":{loc:{start:{line:209,column:4},end:{line:215,column:5}},type:"if",locations:[{start:{line:209,column:4},end:{line:215,column:5}},{start:{line:209,column:4},end:{line:215,column:5}}],line:209},"12":{loc:{start:{line:209,column:8},end:{line:209,column:59}},type:"binary-expr",locations:[{start:{line:209,column:8},end:{line:209,column:25}},{start:{line:209,column:29},end:{line:209,column:59}}],line:209},"13":{loc:{start:{line:218,column:4},end:{line:224,column:5}},type:"if",locations:[{start:{line:218,column:4},end:{line:224,column:5}},{start:{line:218,column:4},end:{line:224,column:5}}],line:218},"14":{loc:{start:{line:218,column:8},end:{line:218,column:59}},type:"binary-expr",locations:[{start:{line:218,column:8},end:{line:218,column:23}},{start:{line:218,column:27},end:{line:218,column:59}}],line:218},"15":{loc:{start:{line:294,column:4},end:{line:299,column:5}},type:"if",locations:[{start:{line:294,column:4},end:{line:299,column:5}},{start:{line:294,column:4},end:{line:299,column:5}}],line:294},"16":{loc:{start:{line:294,column:8},end:{line:294,column:49}},type:"binary-expr",locations:[{start:{line:294,column:8},end:{line:294,column:33}},{start:{line:294,column:37},end:{line:294,column:49}}],line:294},"17":{loc:{start:{line:302,column:4},end:{line:304,column:5}},type:"if",locations:[{start:{line:302,column:4},end:{line:304,column:5}},{start:{line:302,column:4},end:{line:304,column:5}}],line:302},"18":{loc:{start:{line:302,column:8},end:{line:302,column:52}},type:"binary-expr",locations:[{start:{line:302,column:8},end:{line:302,column:24}},{start:{line:302,column:28},end:{line:302,column:52}}],line:302},"19":{loc:{start:{line:307,column:4},end:{line:309,column:5}},type:"if",locations:[{start:{line:307,column:4},end:{line:309,column:5}},{start:{line:307,column:4},end:{line:309,column:5}}],line:307},"20":{loc:{start:{line:307,column:8},end:{line:307,column:39}},type:"binary-expr",locations:[{start:{line:307,column:8},end:{line:307,column:25}},{start:{line:307,column:29},end:{line:307,column:39}}],line:307},"21":{loc:{start:{line:312,column:4},end:{line:314,column:5}},type:"if",locations:[{start:{line:312,column:4},end:{line:314,column:5}},{start:{line:312,column:4},end:{line:314,column:5}}],line:312},"22":{loc:{start:{line:312,column:8},end:{line:312,column:55}},type:"binary-expr",locations:[{start:{line:312,column:8},end:{line:312,column:30}},{start:{line:312,column:34},end:{line:312,column:55}}],line:312},"23":{loc:{start:{line:317,column:4},end:{line:319,column:5}},type:"if",locations:[{start:{line:317,column:4},end:{line:319,column:5}},{start:{line:317,column:4},end:{line:319,column:5}}],line:317},"24":{loc:{start:{line:317,column:8},end:{line:317,column:55}},type:"binary-expr",locations:[{start:{line:317,column:8},end:{line:317,column:30}},{start:{line:317,column:34},end:{line:317,column:55}}],line:317},"25":{loc:{start:{line:340,column:4},end:{line:345,column:5}},type:"if",locations:[{start:{line:340,column:4},end:{line:345,column:5}},{start:{line:340,column:4},end:{line:345,column:5}}],line:340},"26":{loc:{start:{line:396,column:4},end:{line:398,column:5}},type:"if",locations:[{start:{line:396,column:4},end:{line:398,column:5}},{start:{line:396,column:4},end:{line:398,column:5}}],line:396},"27":{loc:{start:{line:401,column:4},end:{line:406,column:5}},type:"if",locations:[{start:{line:401,column:4},end:{line:406,column:5}},{start:{line:401,column:4},end:{line:406,column:5}}],line:401},"28":{loc:{start:{line:401,column:8},end:{line:401,column:66}},type:"binary-expr",locations:[{start:{line:401,column:8},end:{line:401,column:36}},{start:{line:401,column:40},end:{line:401,column:66}}],line:401},"29":{loc:{start:{line:409,column:4},end:{line:415,column:5}},type:"if",locations:[{start:{line:409,column:4},end:{line:415,column:5}},{start:{line:409,column:4},end:{line:415,column:5}}],line:409},"30":{loc:{start:{line:409,column:8},end:{line:409,column:48}},type:"binary-expr",locations:[{start:{line:409,column:8},end:{line:409,column:20}},{start:{line:409,column:24},end:{line:409,column:48}}],line:409},"31":{loc:{start:{line:418,column:4},end:{line:424,column:5}},type:"if",locations:[{start:{line:418,column:4},end:{line:424,column:5}},{start:{line:418,column:4},end:{line:424,column:5}}],line:418},"32":{loc:{start:{line:418,column:8},end:{line:418,column:48}},type:"binary-expr",locations:[{start:{line:418,column:8},end:{line:418,column:20}},{start:{line:418,column:24},end:{line:418,column:48}}],line:418},"33":{loc:{start:{line:475,column:4},end:{line:480,column:5}},type:"if",locations:[{start:{line:475,column:4},end:{line:480,column:5}},{start:{line:475,column:4},end:{line:480,column:5}}],line:475},"34":{loc:{start:{line:483,column:4},end:{line:489,column:5}},type:"if",locations:[{start:{line:483,column:4},end:{line:489,column:5}},{start:{line:483,column:4},end:{line:489,column:5}}],line:483},"35":{loc:{start:{line:483,column:8},end:{line:483,column:74}},type:"binary-expr",locations:[{start:{line:483,column:8},end:{line:483,column:36}},{start:{line:483,column:40},end:{line:483,column:74}}],line:483},"36":{loc:{start:{line:492,column:4},end:{line:498,column:5}},type:"if",locations:[{start:{line:492,column:4},end:{line:498,column:5}},{start:{line:492,column:4},end:{line:498,column:5}}],line:492},"37":{loc:{start:{line:492,column:8},end:{line:492,column:74}},type:"binary-expr",locations:[{start:{line:492,column:8},end:{line:492,column:36}},{start:{line:492,column:40},end:{line:492,column:74}}],line:492},"38":{loc:{start:{line:503,column:23},end:{line:503,column:56}},type:"cond-expr",locations:[{start:{line:503,column:30},end:{line:503,column:45}},{start:{line:503,column:48},end:{line:503,column:56}}],line:503},"39":{loc:{start:{line:506,column:6},end:{line:510,column:7}},type:"if",locations:[{start:{line:506,column:6},end:{line:510,column:7}},{start:{line:506,column:6},end:{line:510,column:7}}],line:506},"40":{loc:{start:{line:550,column:4},end:{line:555,column:5}},type:"if",locations:[{start:{line:550,column:4},end:{line:555,column:5}},{start:{line:550,column:4},end:{line:555,column:5}}],line:550},"41":{loc:{start:{line:550,column:8},end:{line:550,column:75}},type:"binary-expr",locations:[{start:{line:550,column:8},end:{line:550,column:33}},{start:{line:550,column:37},end:{line:550,column:51}},{start:{line:550,column:55},end:{line:550,column:75}}],line:550},"42":{loc:{start:{line:561,column:27},end:{line:561,column:56}},type:"cond-expr",locations:[{start:{line:561,column:34},end:{line:561,column:50}},{start:{line:561,column:53},end:{line:561,column:56}}],line:561},"43":{loc:{start:{line:566,column:6},end:{line:570,column:7}},type:"if",locations:[{start:{line:566,column:6},end:{line:570,column:7}},{start:{line:566,column:6},end:{line:570,column:7}}],line:566},"44":{loc:{start:{line:574,column:4},end:{line:593,column:5}},type:"if",locations:[{start:{line:574,column:4},end:{line:593,column:5}},{start:{line:574,column:4},end:{line:593,column:5}}],line:574},"45":{loc:{start:{line:579,column:6},end:{line:585,column:7}},type:"if",locations:[{start:{line:579,column:6},end:{line:585,column:7}},{start:{line:579,column:6},end:{line:585,column:7}}],line:579},"46":{loc:{start:{line:589,column:8},end:{line:591,column:9}},type:"if",locations:[{start:{line:589,column:8},end:{line:591,column:9}},{start:{line:589,column:8},end:{line:591,column:9}}],line:589},"47":{loc:{start:{line:660,column:0},end:{line:671,column:1}},type:"if",locations:[{start:{line:660,column:0},end:{line:671,column:1}},{start:{line:660,column:0},end:{line:671,column:1}}],line:660},"48":{loc:{start:{line:660,column:4},end:{line:660,column:51}},type:"binary-expr",locations:[{start:{line:660,column:4},end:{line:660,column:33}},{start:{line:660,column:37},end:{line:660,column:51}}],line:660},"49":{loc:{start:{line:674,column:0},end:{line:748,column:1}},type:"if",locations:[{start:{line:674,column:0},end:{line:748,column:1}},{start:{line:674,column:0},end:{line:748,column:1}}],line:674},"50":{loc:{start:{line:674,column:4},end:{line:674,column:61}},type:"binary-expr",locations:[{start:{line:674,column:4},end:{line:674,column:34}},{start:{line:674,column:38},end:{line:674,column:61}}],line:674}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},b:{"0":[0],"1":[0,0],"2":[0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0f80243160137f5d4e7a3ea0f6e6166f57fd09fc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2i5inhzmju=function(){return actualCoverage;};}return actualCoverage;}cov_2i5inhzmju();/**
 * Data Validation Library
 * 
 * A comprehensive, type-safe validation library for JavaScript that supports
 * primitive types, complex objects, arrays, and custom validation rules.
 * 
 * @author AI Assistant
 * @version 1.0.0
 *//**
 * Base Validator class that all specific validators extend from.
 * Provides common functionality for validation, error handling, and chaining.
 */class Validator{constructor(){cov_2i5inhzmju().f[0]++;cov_2i5inhzmju().s[0]++;this.isOptional=false;cov_2i5inhzmju().s[1]++;this.customMessage=null;cov_2i5inhzmju().s[2]++;this.transformFn=null;}/**
   * Marks this validator as optional, allowing null or undefined values
   * @returns {Validator} The validator instance for method chaining
   */optional(){cov_2i5inhzmju().f[1]++;cov_2i5inhzmju().s[3]++;this.isOptional=true;cov_2i5inhzmju().s[4]++;return this;}/**
   * Sets a custom error message for validation failures
   * @param {string} message - Custom error message
   * @returns {Validator} The validator instance for method chaining
   */withMessage(message){cov_2i5inhzmju().f[2]++;cov_2i5inhzmju().s[5]++;this.customMessage=message;cov_2i5inhzmju().s[6]++;return this;}/**
   * Adds a transformation function to be applied before validation
   * @param {Function} fn - Transformation function
   * @returns {Validator} The validator instance for method chaining
   */transform(fn){cov_2i5inhzmju().f[3]++;cov_2i5inhzmju().s[7]++;this.transformFn=fn;cov_2i5inhzmju().s[8]++;return this;}/**
   * Creates a validation error object
   * @param {string} message - Error message
   * @param {*} value - The value that failed validation
   * @param {string} path - The path to the invalid field
   * @returns {Object} Validation error object
   */createError(message,value,path=(cov_2i5inhzmju().b[0][0]++,'')){cov_2i5inhzmju().f[4]++;cov_2i5inhzmju().s[9]++;return{message:(cov_2i5inhzmju().b[1][0]++,this.customMessage)||(cov_2i5inhzmju().b[1][1]++,message),value:value,path:path,type:'validation_error'};}/**
   * Base validation method - to be overridden by subclasses
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result with success flag and potential errors
   */validate(value,path=(cov_2i5inhzmju().b[2][0]++,'')){cov_2i5inhzmju().f[5]++;cov_2i5inhzmju().s[10]++;// Handle optional values
if((cov_2i5inhzmju().b[4][0]++,this.isOptional)&&((cov_2i5inhzmju().b[4][1]++,value===null)||(cov_2i5inhzmju().b[4][2]++,value===undefined))){cov_2i5inhzmju().b[3][0]++;cov_2i5inhzmju().s[11]++;return{success:true,value:value,errors:[]};}else{cov_2i5inhzmju().b[3][1]++;}// Apply transformation if provided
cov_2i5inhzmju().s[12]++;if(this.transformFn){cov_2i5inhzmju().b[5][0]++;cov_2i5inhzmju().s[13]++;try{cov_2i5inhzmju().s[14]++;value=this.transformFn(value);}catch(error){cov_2i5inhzmju().s[15]++;return{success:false,errors:[this.createError(`Transformation failed: ${error.message}`,value,path)]};}}else{cov_2i5inhzmju().b[5][1]++;}cov_2i5inhzmju().s[16]++;return this._validate(value,path);}/**
   * Internal validation method to be implemented by subclasses
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[6]++;cov_2i5inhzmju().s[17]++;throw new Error('_validate method must be implemented by subclasses');}}/**
 * String validator with support for length constraints, patterns, and custom rules
 */class StringValidator extends Validator{constructor(){cov_2i5inhzmju().f[7]++;cov_2i5inhzmju().s[18]++;super();cov_2i5inhzmju().s[19]++;this.minLengthValue=null;cov_2i5inhzmju().s[20]++;this.maxLengthValue=null;cov_2i5inhzmju().s[21]++;this.patternValue=null;cov_2i5inhzmju().s[22]++;this.enumValues=null;}/**
   * Sets minimum length constraint
   * @param {number} length - Minimum length
   * @returns {StringValidator} The validator instance for method chaining
   */minLength(length){cov_2i5inhzmju().f[8]++;cov_2i5inhzmju().s[23]++;this.minLengthValue=length;cov_2i5inhzmju().s[24]++;return this;}/**
   * Sets maximum length constraint
   * @param {number} length - Maximum length
   * @returns {StringValidator} The validator instance for method chaining
   */maxLength(length){cov_2i5inhzmju().f[9]++;cov_2i5inhzmju().s[25]++;this.maxLengthValue=length;cov_2i5inhzmju().s[26]++;return this;}/**
   * Sets a regex pattern that the string must match
   * @param {RegExp} pattern - Regular expression pattern
   * @returns {StringValidator} The validator instance for method chaining
   */pattern(pattern){cov_2i5inhzmju().f[10]++;cov_2i5inhzmju().s[27]++;this.patternValue=pattern;cov_2i5inhzmju().s[28]++;return this;}/**
   * Restricts the string to one of the provided values
   * @param {string[]} values - Array of allowed values
   * @returns {StringValidator} The validator instance for method chaining
   */enum(values){cov_2i5inhzmju().f[11]++;cov_2i5inhzmju().s[29]++;this.enumValues=values;cov_2i5inhzmju().s[30]++;return this;}/**
   * Validates email format using a regex pattern
   * @returns {StringValidator} The validator instance for method chaining
   */email(){cov_2i5inhzmju().f[12]++;cov_2i5inhzmju().s[31]++;return this.pattern(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);}/**
   * Validates URL format
   * @returns {StringValidator} The validator instance for method chaining
   */url(){cov_2i5inhzmju().f[13]++;cov_2i5inhzmju().s[32]++;return this.pattern(/^https?:\/\/[^\s/$.?#].[^\s]*$/i);}/**
   * Internal validation implementation for strings
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[14]++;const errors=(cov_2i5inhzmju().s[33]++,[]);// Check if value is a string
cov_2i5inhzmju().s[34]++;if(typeof value!=='string'){cov_2i5inhzmju().b[6][0]++;cov_2i5inhzmju().s[35]++;return{success:false,errors:[this.createError(`Expected string, got ${typeof value}`,value,path)]};}else{cov_2i5inhzmju().b[6][1]++;}// Check minimum length
cov_2i5inhzmju().s[36]++;if((cov_2i5inhzmju().b[8][0]++,this.minLengthValue!==null)&&(cov_2i5inhzmju().b[8][1]++,value.length<this.minLengthValue)){cov_2i5inhzmju().b[7][0]++;cov_2i5inhzmju().s[37]++;errors.push(this.createError(`String length must be at least ${this.minLengthValue} characters`,value,path));}else{cov_2i5inhzmju().b[7][1]++;}// Check maximum length
cov_2i5inhzmju().s[38]++;if((cov_2i5inhzmju().b[10][0]++,this.maxLengthValue!==null)&&(cov_2i5inhzmju().b[10][1]++,value.length>this.maxLengthValue)){cov_2i5inhzmju().b[9][0]++;cov_2i5inhzmju().s[39]++;errors.push(this.createError(`String length must be at most ${this.maxLengthValue} characters`,value,path));}else{cov_2i5inhzmju().b[9][1]++;}// Check pattern
cov_2i5inhzmju().s[40]++;if((cov_2i5inhzmju().b[12][0]++,this.patternValue)&&(cov_2i5inhzmju().b[12][1]++,!this.patternValue.test(value))){cov_2i5inhzmju().b[11][0]++;cov_2i5inhzmju().s[41]++;errors.push(this.createError(`String does not match required pattern`,value,path));}else{cov_2i5inhzmju().b[11][1]++;}// Check enum values
cov_2i5inhzmju().s[42]++;if((cov_2i5inhzmju().b[14][0]++,this.enumValues)&&(cov_2i5inhzmju().b[14][1]++,!this.enumValues.includes(value))){cov_2i5inhzmju().b[13][0]++;cov_2i5inhzmju().s[43]++;errors.push(this.createError(`String must be one of: ${this.enumValues.join(', ')}`,value,path));}else{cov_2i5inhzmju().b[13][1]++;}cov_2i5inhzmju().s[44]++;return{success:errors.length===0,value:value,errors:errors};}}/**
 * Number validator with support for range constraints and integer validation
 */class NumberValidator extends Validator{constructor(){cov_2i5inhzmju().f[15]++;cov_2i5inhzmju().s[45]++;super();cov_2i5inhzmju().s[46]++;this.minValue=null;cov_2i5inhzmju().s[47]++;this.maxValue=null;cov_2i5inhzmju().s[48]++;this.integerOnly=false;cov_2i5inhzmju().s[49]++;this.positiveOnly=false;}/**
   * Sets minimum value constraint
   * @param {number} value - Minimum value
   * @returns {NumberValidator} The validator instance for method chaining
   */min(value){cov_2i5inhzmju().f[16]++;cov_2i5inhzmju().s[50]++;this.minValue=value;cov_2i5inhzmju().s[51]++;return this;}/**
   * Sets maximum value constraint
   * @param {number} value - Maximum value
   * @returns {NumberValidator} The validator instance for method chaining
   */max(value){cov_2i5inhzmju().f[17]++;cov_2i5inhzmju().s[52]++;this.maxValue=value;cov_2i5inhzmju().s[53]++;return this;}/**
   * Requires the number to be an integer
   * @returns {NumberValidator} The validator instance for method chaining
   */integer(){cov_2i5inhzmju().f[18]++;cov_2i5inhzmju().s[54]++;this.integerOnly=true;cov_2i5inhzmju().s[55]++;return this;}/**
   * Requires the number to be positive (> 0)
   * @returns {NumberValidator} The validator instance for method chaining
   */positive(){cov_2i5inhzmju().f[19]++;cov_2i5inhzmju().s[56]++;this.positiveOnly=true;cov_2i5inhzmju().s[57]++;return this;}/**
   * Internal validation implementation for numbers
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[20]++;const errors=(cov_2i5inhzmju().s[58]++,[]);// Check if value is a number
cov_2i5inhzmju().s[59]++;if((cov_2i5inhzmju().b[16][0]++,typeof value!=='number')||(cov_2i5inhzmju().b[16][1]++,isNaN(value))){cov_2i5inhzmju().b[15][0]++;cov_2i5inhzmju().s[60]++;return{success:false,errors:[this.createError(`Expected number, got ${typeof value}`,value,path)]};}else{cov_2i5inhzmju().b[15][1]++;}// Check integer constraint
cov_2i5inhzmju().s[61]++;if((cov_2i5inhzmju().b[18][0]++,this.integerOnly)&&(cov_2i5inhzmju().b[18][1]++,!Number.isInteger(value))){cov_2i5inhzmju().b[17][0]++;cov_2i5inhzmju().s[62]++;errors.push(this.createError(`Expected integer, got ${value}`,value,path));}else{cov_2i5inhzmju().b[17][1]++;}// Check positive constraint
cov_2i5inhzmju().s[63]++;if((cov_2i5inhzmju().b[20][0]++,this.positiveOnly)&&(cov_2i5inhzmju().b[20][1]++,value<=0)){cov_2i5inhzmju().b[19][0]++;cov_2i5inhzmju().s[64]++;errors.push(this.createError(`Expected positive number, got ${value}`,value,path));}else{cov_2i5inhzmju().b[19][1]++;}// Check minimum value
cov_2i5inhzmju().s[65]++;if((cov_2i5inhzmju().b[22][0]++,this.minValue!==null)&&(cov_2i5inhzmju().b[22][1]++,value<this.minValue)){cov_2i5inhzmju().b[21][0]++;cov_2i5inhzmju().s[66]++;errors.push(this.createError(`Value must be at least ${this.minValue}`,value,path));}else{cov_2i5inhzmju().b[21][1]++;}// Check maximum value
cov_2i5inhzmju().s[67]++;if((cov_2i5inhzmju().b[24][0]++,this.maxValue!==null)&&(cov_2i5inhzmju().b[24][1]++,value>this.maxValue)){cov_2i5inhzmju().b[23][0]++;cov_2i5inhzmju().s[68]++;errors.push(this.createError(`Value must be at most ${this.maxValue}`,value,path));}else{cov_2i5inhzmju().b[23][1]++;}cov_2i5inhzmju().s[69]++;return{success:errors.length===0,value:value,errors:errors};}}/**
 * Boolean validator for true/false values
 */class BooleanValidator extends Validator{/**
   * Internal validation implementation for booleans
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[21]++;cov_2i5inhzmju().s[70]++;if(typeof value!=='boolean'){cov_2i5inhzmju().b[25][0]++;cov_2i5inhzmju().s[71]++;return{success:false,errors:[this.createError(`Expected boolean, got ${typeof value}`,value,path)]};}else{cov_2i5inhzmju().b[25][1]++;}cov_2i5inhzmju().s[72]++;return{success:true,value:value,errors:[]};}}/**
 * Date validator with support for date range constraints
 */class DateValidator extends Validator{constructor(){cov_2i5inhzmju().f[22]++;cov_2i5inhzmju().s[73]++;super();cov_2i5inhzmju().s[74]++;this.minDate=null;cov_2i5inhzmju().s[75]++;this.maxDate=null;}/**
   * Sets minimum date constraint
   * @param {Date} date - Minimum date
   * @returns {DateValidator} The validator instance for method chaining
   */min(date){cov_2i5inhzmju().f[23]++;cov_2i5inhzmju().s[76]++;this.minDate=date;cov_2i5inhzmju().s[77]++;return this;}/**
   * Sets maximum date constraint
   * @param {Date} date - Maximum date
   * @returns {DateValidator} The validator instance for method chaining
   */max(date){cov_2i5inhzmju().f[24]++;cov_2i5inhzmju().s[78]++;this.maxDate=date;cov_2i5inhzmju().s[79]++;return this;}/**
   * Internal validation implementation for dates
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[25]++;const errors=(cov_2i5inhzmju().s[80]++,[]);let dateValue=(cov_2i5inhzmju().s[81]++,value);// Convert string to Date if needed
cov_2i5inhzmju().s[82]++;if(typeof value==='string'){cov_2i5inhzmju().b[26][0]++;cov_2i5inhzmju().s[83]++;dateValue=new Date(value);}else{cov_2i5inhzmju().b[26][1]++;}// Check if value is a valid Date
cov_2i5inhzmju().s[84]++;if((cov_2i5inhzmju().b[28][0]++,!(dateValue instanceof Date))||(cov_2i5inhzmju().b[28][1]++,isNaN(dateValue.getTime()))){cov_2i5inhzmju().b[27][0]++;cov_2i5inhzmju().s[85]++;return{success:false,errors:[this.createError(`Expected valid date, got ${typeof value}`,value,path)]};}else{cov_2i5inhzmju().b[27][1]++;}// Check minimum date
cov_2i5inhzmju().s[86]++;if((cov_2i5inhzmju().b[30][0]++,this.minDate)&&(cov_2i5inhzmju().b[30][1]++,dateValue<this.minDate)){cov_2i5inhzmju().b[29][0]++;cov_2i5inhzmju().s[87]++;errors.push(this.createError(`Date must be after ${this.minDate.toISOString()}`,value,path));}else{cov_2i5inhzmju().b[29][1]++;}// Check maximum date
cov_2i5inhzmju().s[88]++;if((cov_2i5inhzmju().b[32][0]++,this.maxDate)&&(cov_2i5inhzmju().b[32][1]++,dateValue>this.maxDate)){cov_2i5inhzmju().b[31][0]++;cov_2i5inhzmju().s[89]++;errors.push(this.createError(`Date must be before ${this.maxDate.toISOString()}`,value,path));}else{cov_2i5inhzmju().b[31][1]++;}cov_2i5inhzmju().s[90]++;return{success:errors.length===0,value:dateValue,errors:errors};}}/**
 * Array validator that validates both the array structure and individual items
 */class ArrayValidator extends Validator{constructor(itemValidator){cov_2i5inhzmju().f[26]++;cov_2i5inhzmju().s[91]++;super();cov_2i5inhzmju().s[92]++;this.itemValidator=itemValidator;cov_2i5inhzmju().s[93]++;this.minLengthValue=null;cov_2i5inhzmju().s[94]++;this.maxLengthValue=null;}/**
   * Sets minimum array length constraint
   * @param {number} length - Minimum length
   * @returns {ArrayValidator} The validator instance for method chaining
   */minLength(length){cov_2i5inhzmju().f[27]++;cov_2i5inhzmju().s[95]++;this.minLengthValue=length;cov_2i5inhzmju().s[96]++;return this;}/**
   * Sets maximum array length constraint
   * @param {number} length - Maximum length
   * @returns {ArrayValidator} The validator instance for method chaining
   */maxLength(length){cov_2i5inhzmju().f[28]++;cov_2i5inhzmju().s[97]++;this.maxLengthValue=length;cov_2i5inhzmju().s[98]++;return this;}/**
   * Internal validation implementation for arrays
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[29]++;const errors=(cov_2i5inhzmju().s[99]++,[]);// Check if value is an array
cov_2i5inhzmju().s[100]++;if(!Array.isArray(value)){cov_2i5inhzmju().b[33][0]++;cov_2i5inhzmju().s[101]++;return{success:false,errors:[this.createError(`Expected array, got ${typeof value}`,value,path)]};}else{cov_2i5inhzmju().b[33][1]++;}// Check minimum length
cov_2i5inhzmju().s[102]++;if((cov_2i5inhzmju().b[35][0]++,this.minLengthValue!==null)&&(cov_2i5inhzmju().b[35][1]++,value.length<this.minLengthValue)){cov_2i5inhzmju().b[34][0]++;cov_2i5inhzmju().s[103]++;errors.push(this.createError(`Array length must be at least ${this.minLengthValue}`,value,path));}else{cov_2i5inhzmju().b[34][1]++;}// Check maximum length
cov_2i5inhzmju().s[104]++;if((cov_2i5inhzmju().b[37][0]++,this.maxLengthValue!==null)&&(cov_2i5inhzmju().b[37][1]++,value.length>this.maxLengthValue)){cov_2i5inhzmju().b[36][0]++;cov_2i5inhzmju().s[105]++;errors.push(this.createError(`Array length must be at most ${this.maxLengthValue}`,value,path));}else{cov_2i5inhzmju().b[36][1]++;}// Validate each item in the array
const validatedItems=(cov_2i5inhzmju().s[106]++,[]);cov_2i5inhzmju().s[107]++;for(let i=(cov_2i5inhzmju().s[108]++,0);i<value.length;i++){const itemPath=(cov_2i5inhzmju().s[109]++,path?(cov_2i5inhzmju().b[38][0]++,`${path}[${i}]`):(cov_2i5inhzmju().b[38][1]++,`[${i}]`));const itemResult=(cov_2i5inhzmju().s[110]++,this.itemValidator.validate(value[i],itemPath));cov_2i5inhzmju().s[111]++;if(!itemResult.success){cov_2i5inhzmju().b[39][0]++;cov_2i5inhzmju().s[112]++;errors.push(...itemResult.errors);}else{cov_2i5inhzmju().b[39][1]++;cov_2i5inhzmju().s[113]++;validatedItems.push(itemResult.value);}}cov_2i5inhzmju().s[114]++;return{success:errors.length===0,value:validatedItems,errors:errors};}}/**
 * Object validator that validates object structure and individual properties
 */class ObjectValidator extends Validator{constructor(schema){cov_2i5inhzmju().f[30]++;cov_2i5inhzmju().s[115]++;super();cov_2i5inhzmju().s[116]++;this.schema=schema;cov_2i5inhzmju().s[117]++;this.strictMode=false;}/**
   * Enables strict mode - disallows additional properties not defined in schema
   * @returns {ObjectValidator} The validator instance for method chaining
   */strict(){cov_2i5inhzmju().f[31]++;cov_2i5inhzmju().s[118]++;this.strictMode=true;cov_2i5inhzmju().s[119]++;return this;}/**
   * Internal validation implementation for objects
   * @param {*} value - Value to validate
   * @param {string} path - Path for error reporting
   * @returns {Object} Validation result
   */_validate(value,path){cov_2i5inhzmju().f[32]++;const errors=(cov_2i5inhzmju().s[120]++,[]);// Check if value is an object (and not null or array)
cov_2i5inhzmju().s[121]++;if((cov_2i5inhzmju().b[41][0]++,typeof value!=='object')||(cov_2i5inhzmju().b[41][1]++,value===null)||(cov_2i5inhzmju().b[41][2]++,Array.isArray(value))){cov_2i5inhzmju().b[40][0]++;cov_2i5inhzmju().s[122]++;return{success:false,errors:[this.createError(`Expected object, got ${typeof value}`,value,path)]};}else{cov_2i5inhzmju().b[40][1]++;}const validatedObject=(cov_2i5inhzmju().s[123]++,{});// Validate schema properties
cov_2i5inhzmju().s[124]++;for(const[key,validator]of Object.entries(this.schema)){const propertyPath=(cov_2i5inhzmju().s[125]++,path?(cov_2i5inhzmju().b[42][0]++,`${path}.${key}`):(cov_2i5inhzmju().b[42][1]++,key));const propertyValue=(cov_2i5inhzmju().s[126]++,value[key]);const result=(cov_2i5inhzmju().s[127]++,validator.validate(propertyValue,propertyPath));cov_2i5inhzmju().s[128]++;if(!result.success){cov_2i5inhzmju().b[43][0]++;cov_2i5inhzmju().s[129]++;errors.push(...result.errors);}else{cov_2i5inhzmju().b[43][1]++;cov_2i5inhzmju().s[130]++;validatedObject[key]=result.value;}}// Check for additional properties in strict mode
cov_2i5inhzmju().s[131]++;if(this.strictMode){cov_2i5inhzmju().b[44][0]++;const schemaKeys=(cov_2i5inhzmju().s[132]++,Object.keys(this.schema));const valueKeys=(cov_2i5inhzmju().s[133]++,Object.keys(value));const extraKeys=(cov_2i5inhzmju().s[134]++,valueKeys.filter(key=>{cov_2i5inhzmju().f[33]++;cov_2i5inhzmju().s[135]++;return!schemaKeys.includes(key);}));cov_2i5inhzmju().s[136]++;if(extraKeys.length>0){cov_2i5inhzmju().b[45][0]++;cov_2i5inhzmju().s[137]++;errors.push(this.createError(`Additional properties not allowed: ${extraKeys.join(', ')}`,value,path));}else{cov_2i5inhzmju().b[45][1]++;}}else{cov_2i5inhzmju().b[44][1]++;cov_2i5inhzmju().s[138]++;// In non-strict mode, preserve additional properties
for(const[key,val]of Object.entries(value)){cov_2i5inhzmju().s[139]++;if(!(key in this.schema)){cov_2i5inhzmju().b[46][0]++;cov_2i5inhzmju().s[140]++;validatedObject[key]=val;}else{cov_2i5inhzmju().b[46][1]++;}}}cov_2i5inhzmju().s[141]++;return{success:errors.length===0,value:validatedObject,errors:errors};}}/**
 * Main Schema class providing static factory methods for creating validators
 * This is the primary interface for the validation library
 */class Schema{/**
   * Creates a string validator
   * @returns {StringValidator} New string validator instance
   */static string(){cov_2i5inhzmju().f[34]++;cov_2i5inhzmju().s[142]++;return new StringValidator();}/**
   * Creates a number validator
   * @returns {NumberValidator} New number validator instance
   */static number(){cov_2i5inhzmju().f[35]++;cov_2i5inhzmju().s[143]++;return new NumberValidator();}/**
   * Creates a boolean validator
   * @returns {BooleanValidator} New boolean validator instance
   */static boolean(){cov_2i5inhzmju().f[36]++;cov_2i5inhzmju().s[144]++;return new BooleanValidator();}/**
   * Creates a date validator
   * @returns {DateValidator} New date validator instance
   */static date(){cov_2i5inhzmju().f[37]++;cov_2i5inhzmju().s[145]++;return new DateValidator();}/**
   * Creates an object validator with the specified schema
   * @param {Object} schema - Object schema defining property validators
   * @returns {ObjectValidator} New object validator instance
   */static object(schema){cov_2i5inhzmju().f[38]++;cov_2i5inhzmju().s[146]++;return new ObjectValidator(schema);}/**
   * Creates an array validator for arrays of the specified item type
   * @param {Validator} itemValidator - Validator for array items
   * @returns {ArrayValidator} New array validator instance
   */static array(itemValidator){cov_2i5inhzmju().f[39]++;cov_2i5inhzmju().s[147]++;return new ArrayValidator(itemValidator);}}// Export for use in other modules and tests
cov_2i5inhzmju().s[148]++;if((cov_2i5inhzmju().b[48][0]++,typeof module!=='undefined')&&(cov_2i5inhzmju().b[48][1]++,module.exports)){cov_2i5inhzmju().b[47][0]++;cov_2i5inhzmju().s[149]++;module.exports={Schema,Validator,StringValidator,NumberValidator,BooleanValidator,DateValidator,ArrayValidator,ObjectValidator};}else{cov_2i5inhzmju().b[47][1]++;}// Example usage and demonstration
cov_2i5inhzmju().s[150]++;if((cov_2i5inhzmju().b[50][0]++,typeof require==='undefined')||(cov_2i5inhzmju().b[50][1]++,require.main===module)){cov_2i5inhzmju().b[49][0]++;cov_2i5inhzmju().s[151]++;console.log('=== Data Validation Library Demo ===\n');// Define a complex schema for user validation
const addressSchema=(cov_2i5inhzmju().s[152]++,Schema.object({street:Schema.string().minLength(1).maxLength(100),city:Schema.string().minLength(1).maxLength(50),postalCode:Schema.string().pattern(/^\d{5}(-\d{4})?$/).withMessage('Postal code must be in format 12345 or 12345-6789'),country:Schema.string().enum(['USA','Canada','UK','Germany','France'])}));const userSchema=(cov_2i5inhzmju().s[153]++,Schema.object({id:Schema.string().minLength(1).withMessage('ID is required'),name:Schema.string().minLength(2).maxLength(50),email:Schema.string().email().withMessage('Invalid email format'),age:Schema.number().min(0).max(150).integer().optional(),isActive:Schema.boolean(),tags:Schema.array(Schema.string()).minLength(1).maxLength(10),address:addressSchema.optional(),metadata:Schema.object({}).optional(),createdAt:Schema.date().max(new Date()).optional()}));// Test with valid data
cov_2i5inhzmju().s[154]++;console.log('Testing with valid data:');const validUserData=(cov_2i5inhzmju().s[155]++,{id:"user123",name:"John Doe",email:"john.doe@example.com",age:30,isActive:true,tags:["developer","javascript"],address:{street:"123 Main Street",city:"Springfield",postalCode:"12345",country:"USA"},createdAt:new Date('2023-01-01')});const validResult=(cov_2i5inhzmju().s[156]++,userSchema.validate(validUserData));cov_2i5inhzmju().s[157]++;console.log('Valid data result:',{success:validResult.success,errorsCount:validResult.errors.length});// Test with invalid data
cov_2i5inhzmju().s[158]++;console.log('\nTesting with invalid data:');const invalidUserData=(cov_2i5inhzmju().s[159]++,{id:"",name:"J",email:"invalid-email",age:-5,isActive:"yes",tags:[],address:{street:"",city:"Springfield",postalCode:"invalid",country:"Mars"}});const invalidResult=(cov_2i5inhzmju().s[160]++,userSchema.validate(invalidUserData));cov_2i5inhzmju().s[161]++;console.log('Invalid data result:',{success:invalidResult.success,errorsCount:invalidResult.errors.length});cov_2i5inhzmju().s[162]++;console.log('\nValidation errors:');cov_2i5inhzmju().s[163]++;invalidResult.errors.forEach((error,index)=>{cov_2i5inhzmju().f[40]++;cov_2i5inhzmju().s[164]++;console.log(`${index+1}. [${error.path}] ${error.message}`);});}else{cov_2i5inhzmju().b[49][1]++;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,